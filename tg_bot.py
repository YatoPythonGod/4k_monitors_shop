from aiogram import types, executor, Dispatcher, Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.markdown import hbold, hlink

from config import TOKEN_API
from keyboards import *
import sqlite_db
from get_data import get_data_url

bot = Bot(token=TOKEN_API, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
count = 0

all_criteria = sqlite_db.get_criteria()
user_filters = {}


class UserStates(StatesGroup):
    price_state = State()
    diagonal_state = State()
    frequency_state = State()
    resolution_state = State()
    matrix_state = State()
    brand_state = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    global user_filters
    global count
    global all_criteria
    count = 0
    user_filters = {}
    if state:
        await state.finish()
    await bot.send_message(chat_id=message.chat.id,
                           text='üñ•4k-monitor –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!')
    await bot.send_message(chat_id=message.chat.id,
                           text='–°–∫–∞–Ω–∏—Ä—É—é —Å–∞–π—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!\n–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏! ')
    if not sqlite_db.checking_dv_today():
        await sqlite_db.create_db()
        sqlite_db.insert_varible_into_table(get_data_url())

    if not all_criteria:
        all_criteria = sqlite_db.get_criteria()

    await bot.send_message(chat_id=message.chat.id,
                           text='üî•üî•üî•–ü—Ä–æ–º–æ–∫–æ–¥: YATO10üî•üî•üî•')
    await message.answer(text='üëå–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:',
                         reply_markup=filter_keyboard())


@dp.callback_query_handler(text='clear', state='*')
async def cmd_cancel(call: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=call.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    global user_filters
    user_filters = {}
    if state:
        await state.finish()
    return await call.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã!', show_alert=True)


@dp.callback_query_handler(text='set_price', state=None)
async def cmd_set_price(call: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=call.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.price_state.set()
    global all_criteria

    await call.answer(
        f'–¶–µ–Ω—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã—Ä–∏—Ä—É—é—Ç—Å—è –æ—Ç {all_criteria["–¶–µ–Ω–∞"][0]} –¥–æ {all_criteria["–¶–µ–Ω–∞"][1]} ‚ÇΩ \n '
        f'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É ¬´–æ—Ç¬ª –∏ ¬´–¥–æ¬ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:', show_alert=True)


@dp.callback_query_handler(text='show', state=None)
async def cmd_show(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    global count
    global user_filters
    global all_criteria

    if state:
        await state.finish()

    data = sqlite_db.get_db_data(10, count, user_filters) if user_filters else sqlite_db.get_db_data(10, count,
                                                                                                     all_criteria)

    for index, monitor in enumerate(data):
        card = f'{hlink(monitor.get("–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"), monitor.get("–°—Å—ã–ª–∫–∞"))}\n' \
               f'{hbold("–î–∏–∞–≥–æ–Ω–∞–ª—å: ")}{monitor.get("–î–∏–∞–≥–æ–Ω–∞–ª—å")}"\n' \
               f'{hbold("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ")}{monitor.get("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω")}\n' \
               f'{hbold("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ")}{monitor.get("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")}\n' \
               f'{hbold("–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã: ")}{monitor.get("–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã")}\n' \
               f'{hbold("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")}{monitor.get("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (FPS, –ì—Ü)")} –ì—Ü\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}{monitor.get("–¶–µ–Ω–∞")} ‚ÇΩ'
        count = monitor.get("rowid")
        await callback.message.answer(card)
    if len(data) == 0:
        count = 0
        return await callback.message.answer(f'–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ü§∑‚Äç‚ôÇÔ∏è\n {user_filters}',
                                             reply_markup=its_all_keyboard())
    elif 0 < len(data) < 10:
        count = 0
        return await callback.message.answer('–≠—Ç–æ –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º! –ü—Ä–æ–º–æ–∫–æ–¥ üëâ YATO10',
                                             reply_markup=its_all_keyboard())
    await callback.message.answer('–ü–æ–∫–∞–∑–∞—Ç—å 10 —Å–ª–µ–¥—É—é—â–∏—Ö? –ü—Ä–æ–º–æ–∫–æ–¥ üëâ YATO10', reply_markup=show_keyboard())


@dp.callback_query_handler(text='get_more', state=None)
async def cmd_get_more(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    global count
    global user_filters
    data = sqlite_db.get_db_data(10, count, user_filters) if user_filters else sqlite_db.get_db_data(10, count,
                                                                                                     all_criteria)

    for index, monitor in enumerate(data):
        card = f'{hlink(monitor.get("–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"), monitor.get("–°—Å—ã–ª–∫–∞"))}\n' \
               f'{hbold("–î–∏–∞–≥–æ–Ω–∞–ª—å: ")}{monitor.get("–î–∏–∞–≥–æ–Ω–∞–ª—å")}"\n' \
               f'{hbold("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ")}{monitor.get("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω")}\n' \
               f'{hbold("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ")}{monitor.get("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")}\n' \
               f'{hbold("–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã: ")}{monitor.get("–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã")}\n' \
               f'{hbold("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")}{monitor.get("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (FPS, –ì—Ü)")} –ì—Ü\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}{monitor.get("–¶–µ–Ω–∞")} ‚ÇΩ'
        count = monitor.get("rowid")

        await callback.message.answer(card)

    if len(data) < 10:
        count = 0
        return await callback.message.answer('–≠—Ç–æ –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º! –ü—Ä–æ–º–æ–∫–æ–¥ üëâ YATO10',
                                             reply_markup=its_all_keyboard())
    await callback.message.answer('–ü–æ–∫–∞–∑–∞—Ç—å 10 —Å–ª–µ–¥—É—é—â–∏—Ö? –ü—Ä–æ–º–æ–∫–æ–¥ üëâ YATO10', reply_markup=show_keyboard())


@dp.callback_query_handler(text='set_diagonal', state=None)
async def cmd_set_diagonal(call: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=call.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.diagonal_state.set()
    global all_criteria

    await call.answer(
        f'–†–∞–∑–º–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤–∞—Ä–∏—Ä—É—é—Ç—Å—è –æ—Ç {all_criteria["–î–∏–∞–≥–æ–Ω–∞–ª—å"][0]} –¥–æ {all_criteria["–î–∏–∞–≥–æ–Ω–∞–ª—å"][1]} –¥—é–π–º–æ–≤\n '
        f'–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–æ–Ω–∞–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∞ ¬´–æ—Ç¬ª –∏ ¬´–¥–æ¬ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:', show_alert=True)


@dp.callback_query_handler(text='set_frequency', state=None)
async def cmd_set_frequency(call: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=call.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.frequency_state.set()
    global all_criteria

    await call.answer(
        f'–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –≤–∞—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç {all_criteria["–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"][0]} –¥–æ {all_criteria["–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"][1]} –ì–µ—Ä—Ü\n '
        f'–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∞ ¬´–æ—Ç¬ª –∏ ¬´–¥–æ¬ª —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:', show_alert=True)


@dp.callback_query_handler(text='set_resolution', state=None)
async def cmd_set_resolution(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.resolution_state.set()
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:', reply_markup=resolution_keyboard())


@dp.callback_query_handler(text='set_matrix', state=None)
async def cmd_set_matrix(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.matrix_state.set()
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –º–∞—Ç—Ä–∏—Ü—ã:', reply_markup=matrix_keyboard())


@dp.callback_query_handler(text='set_brand', state=None)
async def cmd_set_brand(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    await UserStates.brand_state.set()
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—Ä–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∞:', reply_markup=brand_keyboard())


@dp.callback_query_handler(text='back_to_filters', state=UserStates.brand_state)
async def brand_to_filters(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    global user_filters
    if "–ë—Ä–µ–Ω–¥" in user_filters:
        user_filters["–ë—Ä–µ–Ω–¥"] = set(user_filters["–ë—Ä–µ–Ω–¥"])
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {", ".join(user_filters["–ë—Ä–µ–Ω–¥"])}',
                                      reply_markup=filter_keyboard())
    else:
        await callback.message.answer(f'–§–∏–ª—å—Ç—Ä –º–∞—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=filter_keyboard())


@dp.callback_query_handler(text='back_to_filters', state=UserStates.matrix_state)
async def matrix_to_filters(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    global user_filters
    if "–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã" in user_filters:
        user_filters["–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã"] = set(user_filters["–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã"])
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ç—Ä–∏—Ü: {", ".join(user_filters["–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã"])}',
                                      reply_markup=filter_keyboard())
    else:
        await callback.message.answer(f'–§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–∏–ø –º–∞—Ç—Ä–∏—Ü—ã –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=filter_keyboard())


@dp.callback_query_handler(text='back_to_filters', state=UserStates.resolution_state)
async def res_to_filters(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()
    global user_filters
    if "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ" in user_filters:
        user_filters["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ"] = set(user_filters["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ"])
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {", ".join(user_filters["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ"])}',
                                      reply_markup=filter_keyboard())
    else:
        await callback.message.answer(f'–§–∏–ª—å—Ç—Ä –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=filter_keyboard())


@dp.callback_query_handler(text='back_to_filters', state=None)
async def show_to_filters(callback: types.CallbackQuery, state: FSMContext):
    if not sqlite_db.checking_dv_today():
        return await bot.send_message(chat_id=callback.message.chat.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–∫–∞–Ω–∏–æ–≤–∞—Ç—å —Å–∞–π—Ç —Å–µ–≥–æ–¥–Ω—è!',
                                      reply_markup=restart_keyboard())
    if state:
        await state.finish()

    global count
    global user_filters
    count = 0
    filters = "\n".join([f'{hbold(k)}: {v}' for k, v in user_filters.items()])
    await callback.message.answer(f'–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: \n{filters}')
    await callback.message.answer(text='–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã!\n–ò –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: YATO10',
                                  reply_markup=filter_keyboard())


@dp.callback_query_handler(state=UserStates.brand_state)
async def get_brand_filters(callback: types.CallbackQuery, state: FSMContext):
    global user_filters
    brand_choise = user_filters.get("–ë—Ä–µ–Ω–¥", set())
    brand_choise.add(f'"{callback.data}"')
    user_filters["–ë—Ä–µ–Ω–¥"] = brand_choise

    await callback.message.answer(f'–ú–∞—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–∏–ª—å—Ç—Ä')


@dp.callback_query_handler(state=UserStates.matrix_state)
async def get_matrix_filters(callback: types.CallbackQuery, state: FSMContext):
    global user_filters
    matrix_choise = user_filters.get("–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã", set())
    matrix_choise.add(f'"{callback.data}"')
    user_filters["–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã"] = matrix_choise

    await callback.message.answer(f'–¢–∏–ø –º–∞—Ç—Ä–∏—Ü—ã {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä')


@dp.callback_query_handler(state=UserStates.resolution_state)
async def get_resolution_filters(callback: types.CallbackQuery, state: FSMContext):
    global user_filters
    res_choise = user_filters.get("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", set())
    res_choise.add(f'"{callback.data}"')
    user_filters["–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ"] = res_choise

    await callback.message.answer(f'–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä')


@dp.message_handler(state=UserStates.price_state)
async def get_price_filters(message: types.Message, state: FSMContext):
    global all_criteria
    global user_filters
    try:
        start_price = int(message.text.replace(' ', '').split('-')[0])
        finish_price = int(message.text.replace(' ', '').split('-')[1])
        if start_price >= finish_price or finish_price < all_criteria["–¶–µ–Ω–∞"][0]:
            return await bot.send_message(message.chat.id, f'ü§Ø –í —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ üëâ{start_price} - {finish_price}üëà'
                                                           f' –º—ã –≤—Ä—è–¥ –ª–∏ —Å–º–æ–∂–µ–º —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏. –ó–∞–¥–∞–π —Ü–µ–Ω—É –æ—Ç –∏ –¥–æ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:')
        user_filters["–¶–µ–Ω–∞"] = [start_price, finish_price]

    except ValueError:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, —Ü–µ–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 20000-50000\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
    except Exception:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, —Ü–µ–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 20000-50000\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')

    await bot.send_message(message.chat.id,
                           f'–¶–µ–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {user_filters["–¶–µ–Ω–∞"][0]} ‚ÇΩ  - {user_filters["–¶–µ–Ω–∞"][1]} ‚ÇΩ')

    return await state.finish()


@dp.message_handler(state=UserStates.diagonal_state)
async def get_diagonal_filters(message: types.Message, state: FSMContext):
    global all_criteria
    global user_filters
    try:
        start_diagonal = int(message.text.replace(' ', '').split('-')[0])
        finish_diagonal = int(message.text.replace(' ', '').split('-')[1])
        if start_diagonal > finish_diagonal or finish_diagonal < all_criteria["–î–∏–∞–≥–æ–Ω–∞–ª—å"][0]:
            return await bot.send_message(message.chat.id,
                                          f'ü§Ø –í —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ üëâ{start_diagonal} - {finish_diagonal}üëà'
                                          f' –º—ã –≤—Ä—è–¥ –ª–∏ —Å–º–æ–∂–µ–º —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏. –ó–∞–¥–∞–π—Ç–µ –¥–∏–∞–≥–æ–Ω–∞–ª—å –æ—Ç –∏ –¥–æ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:')
        user_filters['–î–∏–∞–≥–æ–Ω–∞–ª—å'] = [start_diagonal, finish_diagonal]

    except ValueError:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –¥–∏–∞–≥–æ–Ω–∞–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 24-32\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
    except Exception:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –¥–∏–∞–≥–æ–Ω–∞–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 24-32\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')

    await bot.send_message(message.chat.id,
                           f'–î–∏–∞–≥–æ–Ω–∞–ª—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {user_filters["–î–∏–∞–≥–æ–Ω–∞–ª—å"][0]}"  - {user_filters["–î–∏–∞–≥–æ–Ω–∞–ª—å"][1]}"')

    return await state.finish()


@dp.message_handler(state=UserStates.frequency_state)
async def get_frequency_filters(message: types.Message, state: FSMContext):
    global all_criteria
    global user_filters
    try:
        start_frequency = int(message.text.replace(' ', '').split('-')[0])
        finish_frequency = int(message.text.replace(' ', '').split('-')[1])
        if start_frequency > finish_frequency or finish_frequency < all_criteria["–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"][0]:
            return await bot.send_message(message.chat.id,
                                          f'ü§Ø –í —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ üëâ{start_frequency} - {finish_frequency}üëà'
                                          f' –º—ã –≤—Ä—è–¥ –ª–∏ —Å–º–æ–∂–µ–º —á—Ç–æ-—Ç–æ –Ω–∞–π—Ç–∏. –ó–∞–¥–∞–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –æ—Ç –∏ –¥–æ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:')
        user_filters['–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤'] = [start_frequency, finish_frequency]

    except ValueError:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 120-240\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
    except Exception:
        return await bot.send_message(message.chat.id,
                                      f'‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å! üëâ–ü—Ä–∏–º–µ—Ä: 120-240\n'
                                      f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')

    await bot.send_message(message.chat.id,
                           f'–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {user_filters["–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"][0]}–ì—Ü  - {user_filters["–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤"][1]}–ì—Ü')

    return await state.finish()


@dp.callback_query_handler(text='restart', state='*')
async def cmd_restart(callback: types.CallbackQuery, state: FSMContext):
    global user_filters
    global count
    global all_criteria
    count = 0
    user_filters = {}
    if state:
        await state.finish()
    await bot.send_message(chat_id=callback.message.chat.id,
                           text='üñ•4k-monitor –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!')
    await bot.send_message(chat_id=callback.message.chat.id,
                           text='–°–∫–∞–Ω–∏—Ä—É—é —Å–∞–π—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç!\n–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏! ')
    if not sqlite_db.checking_dv_today():
        await sqlite_db.create_db()
        sqlite_db.insert_varible_into_table(get_data_url())

    if not all_criteria:
        all_criteria = sqlite_db.get_criteria()

    await bot.send_message(chat_id=callback.message.chat.id,
                           text='üî•üî•üî•–ü—Ä–æ–º–æ–∫–æ–¥: YATO10üî•üî•üî•')
    await callback.message.answer(text='üëå–ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:',
                         reply_markup=filter_keyboard())


def main():
    executor.start_polling(dispatcher=dp,
                           skip_updates=True)
